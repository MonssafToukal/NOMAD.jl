var documenterSearchIndex = {"docs":
[{"location":"#","page":"-","title":"-","text":"init(path_to_nomad::String)\nparameters\nrunopt(eval::Function,param::parameters)","category":"page"},{"location":"#NOMADjl.init-Tuple{String}","page":"-","title":"NOMADjl.init","text":"init(\".../nomad3.9.1\")\n\nload NOMAD libraries and create C++ class and function needed to handle NOMAD optimization process.\n\nThis function has to be called once before using runopt. Moreover, it should not be called more than once (the C++ class and function cannot be overwritten).\n\nThe only argument is a String containing the path to NOMAD3.9.1 folder.\n\n\n\n\n\n","category":"method"},{"location":"#NOMADjl.parameters","page":"-","title":"NOMADjl.parameters","text":"parameters\n\nmutable struct containing the options of the optimization process.\n\nBest is to construct one with p=parameters() and then modify its attributes one after another. For deeper information concerning these attributes, please refer to the NOMAD documentation. the names of these options are the same in NOMADjl as in NOMAD.\n\n#Attributes :\n\n- dimension::Int64 : Dimension of the problem and\nsize of the argument given to eval.\n2 by default.\n\n- output_types::Vector{String} : A vector containing\nString objects that define the types of outputs returned\nby eval (the order is important) :\n    > \"OBJ\" : objective value to be minimized\n    > \"EB\" : extreme barrier constraint\n    > \"PB\" : progressive barrier constraint\n    > \"F\" : filter approach constraint\n    > \"PEB\" : hybrid constraint EB/PB\n    > ... (see NOMAD documentation)\n[\"OBJ\",\"EB\"] by default.\n\n- display_all_eval::Bool : if false, only evaluations\nthat allow to improve the current state are displayed.\nfalse by default.\n\n- display_stats::String : String defining the way outputs\nare displayed (it should not contain any quotes). Here are\nexamples of keywords that can be used :\n    > bbe : black box evaluations\n    > obj : objective function value\n    > sol : solution\n    > bbo : black box outputs\n    > mesh_index : mesh mesh_index\n    > mesh_size : mesh size parameter\n    > ... (see NOMAD documentation)\n\"bbe ( sol ) obj\" by default.\n\n- x0::Vector{Float} : Initialization point for\nNOMAD. Its size needs to be equal to dimension.\n[0,0] by default.\n\n- lower_bound::Vector{Number} : Lower bound for\neach coordinate of the state.\n[-100,-100] by default.\n\n- upper_bound::Vector{Number} : Upper bound for\neach coordinate of the state.\n[100, 100] by default.\n\n- max_bb_eval::Int : Maximum of calls to eval\nallowed.\n100 by default.\n\n- display_degree::Int : Integer between 0 and 3\nthat sets the level of display.\n2 by default.\n\n- solution_file::String : Name of the generated\noutput file containing the returned minimum.\n\"sol.txt\" by default.\n\n\n\n\n\n","category":"type"},{"location":"#NOMADjl.runopt-Tuple{Function,parameters}","page":"-","title":"NOMADjl.runopt","text":"runopt(eval,param)\n\nRun NOMAD with settings defined by param and an optimization problem defined by eval.\n\ninit has to be called before using runopt.\n\n#Arguments :\n\n- eval::Function : a function of the form :\n\n\t(count_eval,bb_outputs)=eval(x)\n\n\tbb_outputs being a vector{Float64} containing\n\tthe values of objectives functions and constraints\n\tfor a given input vector x. NOMAD will seak for\n\tminimizing the objective functions and keeping\n\tconstraints inferior to 0. count_eval is a\n\tboolean equal to true if the evaluation has\n\tto be taken into account by NOMAD.\n\n- param::Parameters : an instance of the julia mutable\n\tstruct Parameters of which the attributes are the\n\tsettings of the optimization process (dimension,\n\toutput types, display options, bounds, etc.).\n\nThis function first wraps eval with a julia function eval wrap that takes a C-double[] as argument and returns a C-double[]. Then it converts all param attributes into C++ variables and calls the C++ function cpp main previously defined by init_NOMADjl.\n\n\n\n\n\n","category":"method"}]
}
